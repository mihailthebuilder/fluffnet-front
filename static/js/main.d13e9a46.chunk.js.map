{"version":3,"sources":["App.js","index.js"],"names":["App","useState","preview","raw","image","setImage","message","setMessage","isLoading","setIsLoading","requestUrl","window","location","hostname","className","href","id","onSubmit","event","preventDefault","fd","FormData","append","axios","post","then","res","status","Error","data","fluffy","prob","undefined","isFluffy","probShown","Math","round","conclusion","confidence","catch","error","console","onChange","rawFile","target","files","type","includes","size","URL","createObjectURL","required","disabled","alt","src","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAoJeA,MAhJf,WACE,MAA0BC,mBAAS,CAAEC,QAAS,GAAIC,IAAK,KAAvD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,4CAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EACyB,cAA7BC,OAAOC,SAASC,SACZ,yBACA,qCAyDN,OACE,sBAAKC,UAAU,MAAf,UACE,mCACE,8BACE,mBAAGC,KAAK,OAAR,mBAEF,6CAGF,0BAASC,GAAG,OAAZ,UACE,sBAAKF,UAAU,YAAf,UACE,iIAIA,uBAAMG,SApDO,SAACC,GACpBA,EAAMC,iBACNV,GAAa,GAEb,IAAIW,EAAK,IAAIC,SACbD,EAAGE,OAAO,QAASlB,EAAMD,KAEzBoB,IACGC,KAAKd,EAAYU,GACjBK,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OACN,MAAM,IAAIC,MAAM,0BAA2B,CAAEF,QAG/C,MAAyBA,EAAIG,KAArBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KAEhB,QAAeC,IAAXF,QAAiCE,IAATD,EAC1B,MAAM,IAAIH,MAAM,qBAAsB,CAAEF,QAE1C,IAAMO,EAAsB,SAAXH,EAEbI,EAAYC,KAAKC,MAAa,IAAPL,GACtBE,IAAUC,EAAY,IAAMA,GAEjC,IAAMG,EAAaJ,EAAW,2BAAmB,+BAC3CK,EAAU,iBAAaJ,EAAb,iBAEhB3B,EAAW8B,EAAaC,GACxB7B,GAAa,MAEd8B,OAAM,SAACC,GACNjC,EAAW,4CACXkC,QAAQD,MAAMA,EAAMlC,SACpBmC,QAAQD,MAAMA,EAAMd,SAmBlB,UACE,kCACE,sBAAMZ,UAAU,uBAAhB,0BACA,uBAAO4B,SAzEC,SAACxB,GACnB,IAAMyB,EAAUzB,EAAM0B,OAAOC,MAAM,GAE9BF,EAAQG,KAAKC,SAAS,SAGhBJ,EAAQK,KAAO,KAAO,MAAQ,IACvC3C,EAAS,CAAEH,QAAS,GAAIC,IAAK,KAC7BI,EAAW,wCAEXF,EAAS,CACPH,QAAS+C,IAAIC,gBAAgBP,GAC7BxC,IAAKwC,IAEPpC,EAAW,uCAVXF,EAAS,CAAEH,QAAS,GAAIC,IAAK,KAC7BI,EAAW,gDAoE2BuC,KAAK,OAAOK,UAAQ,OAGpD,wBACErC,WACGV,EAAMF,SAAWM,EAAY,SAAW,wBAE3CsC,KAAK,SACLM,UAAWhD,EAAMF,SAAWM,EAL9B,SAOGA,EAAY,aAAe,iBAIlC,qBAAKM,UAAU,aAAf,SACGV,EAAMF,QACL,qBAAKmD,IAAI,GAAGC,IAAKlD,EAAMF,UAEvB,qBAAKY,UAAU,oBAAf,4CAKN,yBAASE,GAAG,UAAZ,SACE,sDAEE,sBAAMF,UAAU,gBAAhB,SAAiCR,SAIrC,0BAASU,GAAG,MAAZ,UACE,qCACA,sBAAKF,UAAU,WAAf,UACE,qDACA,0DAC4B,IAC1B,mBAAGC,KAAK,+CAAR,kBAFF,UAKF,sBAAKD,UAAU,WAAf,UACE,mEACA,yCAEF,sBAAKA,UAAU,WAAf,UACE,qGAGA,+EACiD,IAC/C,mBAAGC,KAAK,+CAAR,yBAFF,yCAKyC,IACvC,mBAAGA,KAAK,4CAAR,sBANF,iBCjIVwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d13e9a46.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.scss\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [image, setImage] = useState({ preview: \"\", raw: \"\" });\n  const [message, setMessage] = useState(\"gimme an image puh-leeeaase ü•∫\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const requestUrl =\n    window.location.hostname === \"localhost\"\n      ? \"http://localhost:5000/\"\n      : \"https://fluffnet-api.herokuapp.com\";\n\n  const uploadImage = (event) => {\n    const rawFile = event.target.files[0];\n\n    if (!rawFile.type.includes(\"image\")) {\n      setImage({ preview: \"\", raw: \"\" });\n      setMessage(\"please give me an image üñºÔ∏è\");\n    } else if (rawFile.size / 1024 / 1024 >= 10) {\n      setImage({ preview: \"\", raw: \"\" });\n      setMessage(\"upload an image of less than 10 MB\");\n    } else {\n      setImage({\n        preview: URL.createObjectURL(rawFile),\n        raw: rawFile,\n      });\n      setMessage(\"quick, send it to me üì®\");\n    }\n  };\n\n  const predictImage = (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    let fd = new FormData();\n    fd.append(\"image\", image.raw);\n\n    axios\n      .post(requestUrl, fd)\n      .then((res) => {\n        if (res.status !== 200) {\n          throw new Error(\"Response status !== 200\", { res });\n        }\n\n        const { fluffy, prob } = res.data;\n\n        if (fluffy === undefined || prob === undefined)\n          throw new Error(\"Undefined response\", { res });\n\n        const isFluffy = fluffy === \"True\";\n\n        let probShown = Math.round(prob * 100);\n        if (!isFluffy) probShown = 100 - probShown;\n\n        const conclusion = isFluffy ? \"it's fluffy ‚òÅÔ∏è\" : \"it's not fluffy ü™®\";\n        const confidence = ` (with ${probShown}% confidence)`;\n\n        setMessage(conclusion + confidence);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setMessage(\"something went wrong - try again please!\");\n        console.error(error.message);\n        console.error(error.res);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <nav>\n          <a href=\"#faq\">FAQ</a>\n        </nav>\n        <h1>FluffNet</h1>\n      </header>\n\n      <section id=\"hero\">\n        <div className=\"hero-left\">\n          <p>\n            Upload an image and our ü§ñ will tell you if it has something fluffy\n            in it ‚òÅÔ∏è\n          </p>\n          <form onSubmit={predictImage}>\n            <label>\n              <span className=\"button upload-button\">Upload image</span>\n              <input onChange={uploadImage} type=\"file\" required></input>\n            </label>\n\n            <button\n              className={\n                !image.preview || isLoading ? \"button\" : \"button submit-enabled\"\n              }\n              type=\"submit\"\n              disabled={!image.preview || isLoading}\n            >\n              {isLoading ? \"Loading...\" : \"Submit\"}\n            </button>\n          </form>\n        </div>\n        <div className=\"hero-right\">\n          {image.preview ? (\n            <img alt=\"\" src={image.preview} />\n          ) : (\n            <div className=\"image-placeholder\">Image will be shown here </div>\n          )}\n        </div>\n      </section>\n\n      <section id=\"results\">\n        <h2>\n          ü§ñ says...\n          <span className=\"robot-message\">{message}</span>\n        </h2>\n      </section>\n\n      <section id=\"faq\">\n        <h2>FAQ</h2>\n        <div className=\"question\">\n          <h3>How does this work?</h3>\n          <p>\n            Check out the source code{\" \"}\n            <a href=\"https://github.com/mihailthebuilder/fluffnet\">here</a>.\n          </p>\n        </div>\n        <div className=\"question\">\n          <h3>Do you store the images I upload?</h3>\n          <p>Nope.</p>\n        </div>\n        <div className=\"question\">\n          <h3>\n            How can I let you know about an issue/error with the website/model?\n          </h3>\n          <p>\n            If you're a dev, you can raise a ticket on the{\" \"}\n            <a href=\"https://github.com/mihailthebuilder/fluffnet\">\n              GitHub repo\n            </a>\n            . If not, you can send me a message on{\" \"}\n            <a href=\"https://www.linkedin.com/in/mihailmarian/\">LinkedIn</a>.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}